source("../passport/get_passport_data.R")
source("../generic/p95_generic.R")
#calling login_genesys function
login_genesys()
source("../passport/get_passport_data.R")
#calling login_genesys function
login_genesys()
library(mongolite)
library(jsonlite)
library(RJSONIO)
library(RCurl)
library(ndjson)
#connect to Mongo database (accession collection)
mng_conn<-mongo(collection = 'indicators_accession', db = 'indicator')
#connect to Mongo database (accession collection)
passport_indicators<-mongo(collection = 'indicators_accession', db = 'indicator')
library(mongolite)
library(jsonlite)
library(RJSONIO)
library(RCurl)
# Passport indicators file
source("../passport/get_passport_data.R")
# Auth with Genesys API
login_genesys()
#connect to Mongo database (accession collection)
passport_indicators<-mongo(collection = 'indicators_accession', db = 'indicator')
#' Get accession passport data by crop
#' @param crop a vector of crop names
accession_data<-get_passport_data("beans")
library(futile.logger)
install.packages(futile.logger)
install.packages("futile.logger")
install.packages("dplyr", "raster", "here")
install.packages("dplyr")
install.packages("raster")
install.packages("here")
#install.packages("here")
#' Get accession passport data by crop
#' @param crop a vector of crop names
accession_data<-get_passport_data("beans")
#install.packages("here")
remove.packages("raster")
install.packages("raster", dependencies = TRUE)
#remove.packages("raster")
#' Get accession passport data by crop
#' @param crop a vector of crop names
accession_data<-get_passport_data("beans")
#install.packages("raster", dependencies = TRUE)
remove.packages("raster")
install.packages("raster", dependencies = TRUE)
#remove.packages("raster")
#' Get accession passport data by crop
#' @param crop a vector of crop names
accession_data<-get_passport_data("beans")
install.packages("Rcpp")
#install.packages("Rcpp")
#remove.packages("raster")
#' Get accession passport data by crop
#' @param crop a vector of crop names
accession_data<-get_passport_data("beans")
#install.packages("raster", dependencies = TRUE)
#install.packages("Rcpp")
remove.packages("raster")
#install.packages("raster", dependencies = TRUE)
install.packages("Rcpp")
install.packages("raster", dependencies = TRUE)
#remove.packages("raster")
#' Get accession passport data by crop
#' @param crop a vector of crop names
accession_data<-get_passport_data("beans")
#install.packages("raster", dependencies = TRUE)
#install.packages("Rcpp")
remove.packages("raster")
install.packages(c("Rcpp", "rgdal", "sp", "raster"))
install.packages(c("Rcpp", "rgdal", "sp", "raster"))
#' Get accession passport data by crop
#' @param crop a vector of crop names
accession_data<-get_passport_data("beans")
#' Get accession passport data by crop
#' @param crop a vector of crop names
accession_data<-get_passport_data("Beans")
# Auth with Genesys API
login_genesys()
#' Get accession passport data by crop
#' @param crop a vector of crop names
accession_data<-get_passport_data("Beans")
#' Get accession passport data by crop
#' @param crop a vector of crop names
accession_data<-get_passport_data("Beans")
# Auth with Genesys API
login_genesys()
#' Get accession passport data by crop
#' @param crop a vector of crop names
accession_data<-get_passport_data("Beans")
#' Get accession passport data by crop
#' @param crop a vector of crop names
accession_data<-get_passport_data("Cassava")
#inserting json data extracted before
mng_conn$insert(jsonlite::fromJSON(accession_data))
#inserting json data extracted before
passport_indicators$insert(jsonlite::fromJSON(accession_data))
#connect to Mongo database (accession collection)
passport_indicators<-mongo(collection = 'indicators_accession', db = 'indicator')
library(mongolite)
library(jsonlite)
library(RJSONIO)
library(RCurl)
#connect to Mongo database (accession collection)
passport_indicators<-mongo(collection = 'indicators_accession', db = 'indicator')
#inserting json data extracted before
passport_indicators$insert(jsonlite::fromJSON(accession_data))
#inserting json data extracted before
passport_indicators$insert(accession_data)
#' Get accession passport data by crop
#' @param crop a vector of crop names
accession_data<-get_passport_data("Forages")
#inserting json data extracted before
passport_indicators$insert(accession_data)
#' Get accession passport data by crop
#' @param crop a vector of crop names
accession_data<-get_passport_data("Wheat")
#' Get accession passport data by crop
#' @param crop a vector of crop names
accession_data<-get_passport_data("Maize")
# Auth with Genesys API
login_genesys()
#' Get accession passport data by crop
#' @param crop a vector of crop names
accession_data<-get_passport_data("Maize")
#' Get accession passport data by crop
#' @param crop a vector of crop names
accession_data<-get_passport_data("Maize")
